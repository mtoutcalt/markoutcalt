<div class="progress-bar-container">
    <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
</div>

<style>
.progress-bar-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background-color: rgba(0, 0, 0, 0.1);
    z-index: 10000;
    transition: all 0.3s ease;
}

html[data-theme="dark"] .progress-bar-container {
    background-color: rgba(255, 255, 255, 0.1);
}

html[data-theme="light"] .progress-bar-container {
    background-color: rgba(0, 0, 0, 0.1);
}

.progress-bar {
    height: 100%;
    width: 0%;
    background: linear-gradient(90deg, gold, #FF6F61);
    transition: width 0.1s ease-out;
}

.progress-bar-container.hidden {
    opacity: 0;
}
</style>

<script is:inline>
    let scrollHandler = null;
    let rafId = null;

    function initProgressBar() {
        const progressBar = document.querySelector('.progress-bar');
        const progressContainer = document.querySelector('.progress-bar-container');
        
        if (!progressBar || !progressContainer) {
            setTimeout(initProgressBar, 100);
            return;
        }

        // Hide progress bar on links page
        if (window.location.pathname === '/links' || window.location.pathname === '/links/') {
            progressContainer.style.display = 'none';
            return;
        }

        let ticking = false;

        function updateProgress() {
            const scrolled = window.scrollY;
            const articleHeight = document.body.scrollHeight;
            const viewportHeight = window.innerHeight;
            const scrollableHeight = articleHeight - viewportHeight;
            
            if (scrollableHeight <= 0) {
                progressBar.style.width = '0%';
                ticking = false;
                return;
            }
            
            const progress = Math.min(Math.max((scrolled / scrollableHeight) * 100, 0), 100);
            
            progressBar.setAttribute('aria-valuenow', Math.round(progress).toString());
            progressBar.style.width = `${progress}%`;
            
            ticking = false;
            rafId = null;
        }

        function requestTick() {
            if (!ticking) {
                rafId = requestAnimationFrame(updateProgress);
                ticking = true;
            }
        }

        // Clean up previous listeners
        if (scrollHandler) {
            window.removeEventListener('scroll', scrollHandler);
        }

        scrollHandler = requestTick;
        window.addEventListener('scroll', scrollHandler, { passive: true });
        
        // Show container immediately and update progress
        progressContainer.classList.remove('hidden');
        updateProgress();
    }

    function cleanupProgressBar() {
        if (scrollHandler) {
            window.removeEventListener('scroll', scrollHandler);
            scrollHandler = null;
        }
        if (rafId) {
            cancelAnimationFrame(rafId);
            rafId = null;
        }
    }

    // Try multiple initialization methods
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initProgressBar);
    } else {
        initProgressBar();
    }
    
    // Clean up before navigation and reinitialize after
    document.addEventListener('astro:before-swap', cleanupProgressBar);
    document.addEventListener('astro:after-swap', initProgressBar);
</script>