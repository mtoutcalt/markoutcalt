---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { ClientRouter } from 'astro:transitions';

// Sample article data for demonstration
const articles = [
  {
    id: 1,
    title: "The Future of Web Development",
    url: "https://example.com/future-web-dev",
    description: "An in-depth look at emerging technologies shaping the web",
    category: "Tech",
    date: "2024-01-15",
    domain: "techcrunch.com",
    isFavorite: true,
    tags: ["JavaScript", "Web Development", "Future Tech"],
    readTime: "8 min read"
  },
  {
    id: 2,
    title: "CSS Grid vs Flexbox: When to Use What",
    url: "https://example.com/css-grid-flexbox",
    description: "A practical guide to choosing the right layout method",
    category: "Design",
    date: "2024-01-10",
    domain: "css-tricks.com",
    isFavorite: false,
    tags: ["CSS", "Layout", "Design"],
    readTime: "6 min read"
  },
  {
    id: 3,
    title: "Building Accessible React Components",
    url: "https://example.com/accessible-react",
    description: "Best practices for creating inclusive user interfaces",
    category: "Tech",
    date: "2024-01-08",
    domain: "a11yproject.com",
    isFavorite: true,
    tags: ["React", "Accessibility", "UX"],
    readTime: "12 min read"
  },
  {
    id: 4,
    title: "The Psychology of Color in UI Design",
    url: "https://example.com/color-psychology-ui",
    description: "How color choices impact user behavior and emotions",
    category: "Design",
    date: "2024-01-05",
    domain: "smashingmagazine.com",
    isFavorite: false,
    tags: ["Color Theory", "Psychology", "UI Design"],
    readTime: "10 min read"
  },
  {
    id: 5,
    title: "Mastering TypeScript Advanced Types",
    url: "https://example.com/typescript-advanced",
    description: "Deep dive into utility types, conditional types, and more",
    category: "Tech",
    date: "2024-01-03",
    domain: "blog.logrocket.com",
    isFavorite: true,
    tags: ["TypeScript", "Programming", "Types"],
    readTime: "15 min read"
  },
  {
    id: 6,
    title: "Minimalist Design Principles",
    url: "https://example.com/minimalist-design",
    description: "Less is more: creating beautiful, functional interfaces",
    category: "Design",
    date: "2024-01-01",
    domain: "uxdesign.cc",
    isFavorite: false,
    tags: ["Minimalism", "Design Principles", "UI"],
    readTime: "7 min read"
  },
  {
    id: 7,
    title: "Server-Side Rendering with Next.js",
    url: "https://example.com/nextjs-ssr",
    description: "Improving performance and SEO with SSR",
    category: "Tech",
    date: "2023-12-28",
    domain: "vercel.com",
    isFavorite: false,
    tags: ["Next.js", "SSR", "Performance"],
    readTime: "11 min read"
  },
  {
    id: 8,
    title: "Design Systems at Scale",
    url: "https://example.com/design-systems-scale",
    description: "Building and maintaining design systems for large teams",
    category: "Design",
    date: "2023-12-25",
    domain: "designsystems.com",
    isFavorite: true,
    tags: ["Design Systems", "Collaboration", "Scaling"],
    readTime: "14 min read"
  }
];

const categories = [...new Set(articles.map(article => article.category))].sort();
const pageTitle = "Articles";
const pageDescription = "A retro desktop of curated articles and links.";
---

<html lang="en">
<head>
  <BaseHead title={pageTitle} description={pageDescription} />
  <ClientRouter />
  <style>
    /* Reset and base styles */
    * {
      box-sizing: border-box;
    }
    
    body {
      margin: 0;
      padding: 0;
      font-family: 'Tahoma', 'Segoe UI', sans-serif;
      overflow: hidden;
    }

    /* Windows XP desktop container */
    .desktop-container {
      width: 100vw;
      height: 100vh;
      background: linear-gradient(135deg, #235788 0%, #3e7cb1 40%, #81a9d1 100%);
      position: relative;
      cursor: default;
      user-select: none;
    }

    /* Desktop icons */
    .desktop-icons {
      position: absolute;
      top: 20px;
      left: 20px;
      display: grid;
      grid-template-columns: repeat(auto-fit, 110px);
      gap: 15px;
      width: calc(100% - 40px);
      height: calc(100% - 80px);
      grid-auto-rows: max-content;
    }

    .desktop-icon {
      width: 110px;
      height: 120px;
      display: flex;
      flex-direction: column;
      align-items: center;
      cursor: pointer;
      padding: 6px;
      border-radius: 3px;
      transition: background-color 0.15s ease;
    }

    .desktop-icon:hover {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px dotted rgba(255, 255, 255, 0.4);
    }

    .desktop-icon.selected {
      background-color: rgba(51, 153, 255, 0.3);
      border: 1px dotted rgba(51, 153, 255, 0.8);
    }

    .icon-image {
      width: 48px;
      height: 48px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 6px;
      font-size: 32px;
      filter: drop-shadow(1px 1px 2px rgba(0,0,0,0.3));
    }

    .icon-text {
      font-size: 12px;
      color: white;
      text-align: center;
      word-wrap: break-word;
      line-height: 1.3;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
      font-weight: 400;
      max-width: 100px;
      overflow: hidden;
      display: -webkit-box;
      -webkit-line-clamp: 4;
      -webkit-box-orient: vertical;
      flex: 1;
    }

    /* Windows XP Taskbar */
    .taskbar {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 40px;
      background: linear-gradient(to bottom, #245edb 0%, #1941a5 40%, #1941a5 60%, #16368a 100%);
      border-top: 1px solid #4a7eff;
      display: flex;
      align-items: center;
      padding: 0 6px;
      font-size: 11px;
      box-shadow: 0 -2px 5px rgba(0,0,0,0.2);
    }

    .start-button {
      height: 30px;
      padding: 0 20px;
      background: linear-gradient(to bottom, #5cb85c 0%, #449d44 100%);
      border: 1px solid #357a35;
      border-radius: 3px;
      font-weight: bold;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 6px;
      color: white;
      text-shadow: 1px 1px 1px rgba(0,0,0,0.3);
      box-shadow: inset 1px 1px 0 rgba(255,255,255,0.3);
    }

    .start-button:hover {
      background: linear-gradient(to bottom, #6bc26b 0%, #4cae4c 100%);
    }

    .start-button:active {
      background: linear-gradient(to bottom, #449d44 0%, #357a35 100%);
      box-shadow: inset 1px 1px 2px rgba(0,0,0,0.2);
    }

    .clock {
      margin-left: auto;
      padding: 6px 12px;
      background: linear-gradient(to bottom, #e1ecf7 0%, #c7d8ef 100%);
      border: 1px solid #8dacd4;
      border-radius: 3px;
      height: 28px;
      display: flex;
      align-items: center;
      color: #333;
      font-family: 'Tahoma', sans-serif;
      font-size: 11px;
      box-shadow: inset 1px 1px 0 rgba(255,255,255,0.8);
    }

    /* Windows XP Filter toolbar */
    .filter-toolbar {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      flex-direction: column;
      gap: 6px;
      background: linear-gradient(to bottom, #f0f0f0 0%, #e5e5e5 100%);
      border: 1px solid #8a8a8a;
      border-radius: 6px;
      padding: 12px;
      box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
      font-family: 'Tahoma', sans-serif;
      z-index: 100;
      pointer-events: auto;
    }
    
    .filter-toolbar-title {
      font-weight: bold;
      font-size: 12px;
      margin-bottom: 4px;
      color: #333;
      text-align: center;
    }

    .filter-button {
      padding: 8px 14px;
      background: linear-gradient(to bottom, #f8f8f8 0%, #e1e1e1 100%);
      border: 1px solid #999;
      border-radius: 3px;
      font-size: 12px;
      cursor: pointer;
      min-width: 100px;
      color: #000;
      font-weight: 500;
      box-shadow: inset 1px 1px 0 rgba(255,255,255,0.8);
      text-align: center;
      position: relative;
      z-index: 10;
      pointer-events: auto;
    }

    .filter-button:hover {
      background: linear-gradient(to bottom, #fff 0%, #f0f0f0 100%);
      border-color: #666;
    }

    .filter-button:active,
    .filter-button.active {
      background: linear-gradient(to bottom, #d1d1d1 0%, #e8e8e8 100%);
      border: 1px solid #666;
      box-shadow: inset 1px 1px 2px rgba(0,0,0,0.1);
    }

    /* Hide site header/footer for full desktop experience */
    header, footer {
      display: none;
    }

    /* Override any global styles */
    main {
      all: unset;
    }
  </style>
</head>
<body>
  <div class="desktop-container">
    <!-- Filter toolbar -->
    <div class="filter-toolbar">
      <div class="filter-toolbar-title">View:</div>
      <button class="filter-button active" data-filter="all">All Files</button>
      <button class="filter-button" data-filter="favorites">‚òÖ Favorites</button>
      <button class="filter-button" data-filter="Tech">Tech</button>
      <button class="filter-button" data-filter="Design">Design</button>
    </div>

    <!-- Desktop icons -->
    <div class="desktop-icons">
      <!-- Category folders -->
      {categories.map(category => (
        <div class="desktop-icon folder" data-category={category}>
          <div class="icon-image">
            {category === 'Tech' ? 'üñ•Ô∏è' : category === 'Design' ? 'üé®' : 'üìÅ'}
          </div>
          <div class="icon-text">{category}</div>
        </div>
      ))}

      <!-- Article files -->
      {articles.map(article => (
        <div 
          class="desktop-icon article" 
          data-article-id={article.id}
          data-category={article.category}
          data-favorite={article.isFavorite}
        >
          <div class="icon-image">
            {article.isFavorite ? '‚≠ê' : 'üìÑ'}
          </div>
          <div class="icon-text">{article.title}</div>
        </div>
      ))}
    </div>

    <!-- Taskbar -->
    <div class="taskbar">
      <button class="start-button">
        <span style="font-size: 14px;">ü™ü</span> Start
      </button>
      <div class="clock" id="clock">12:00 PM</div>
    </div>

  </div>

  <script define:vars={{ articlesData: articles }}>
    document.addEventListener('DOMContentLoaded', () => {
      
      // Update clock
      function updateClock() {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        document.getElementById('clock').textContent = timeString;
      }
      updateClock();
      setInterval(updateClock, 60000);

      // Icon selection
      let selectedIcon = null;
      const icons = document.querySelectorAll('.desktop-icon');
      
      icons.forEach(icon => {
        icon.addEventListener('click', (e) => {
          e.stopPropagation();
          
          // If it's an article, open it directly
          if (icon.classList.contains('article')) {
            const articleId = parseInt(icon.dataset.articleId);
            const article = articlesData.find(a => a.id === articleId);
            if (article) {
              window.open(article.url, '_blank');
            }
            return;
          }
          
          // Otherwise, handle selection
          if (selectedIcon) {
            selectedIcon.classList.remove('selected');
          }
          selectedIcon = icon;
          icon.classList.add('selected');
        });
      });

      // Click desktop to deselect
      document.querySelector('.desktop-container').addEventListener('click', () => {
        if (selectedIcon) {
          selectedIcon.classList.remove('selected');
          selectedIcon = null;
        }
      });

      // Filter functionality
      const filterButtons = document.querySelectorAll('.filter-button');
      const articleIcons = document.querySelectorAll('.desktop-icon.article');
      const folderIcons = document.querySelectorAll('.desktop-icon.folder');

      filterButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          
          // Update active button
          filterButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          
          const filter = button.dataset.filter;

          // Show/hide articles
          articleIcons.forEach(icon => {
            const category = icon.dataset.category;
            const isFavorite = icon.dataset.favorite === 'true';
            
            let show = false;
            if (filter === 'all') {
              show = true;
            } else if (filter === 'favorites') {
              show = isFavorite;
            } else {
              show = category === filter;
            }

            icon.style.display = show ? 'flex' : 'none';
          });

          // Show/hide folders
          folderIcons.forEach(folder => {
            const category = folder.dataset.category;
            const show = filter === 'all' || filter === category;
            folder.style.display = show ? 'flex' : 'none';
          });
        });
      });
    });
  </script>
</body>
</html>