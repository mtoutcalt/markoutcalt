---
import { ClientRouter } from 'astro:transitions';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { Image } from 'astro:assets';
import me_alien_pic from '../assets/me.jpg';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import '../styles/header-animation.css';
---

<!doctype html>
<html lang="en" transition:animate="none">
	<head>
		<script src="https://tinylytics.app/embed/PsWFV1p6crVZtyvU1bnr.js?kudos=ðŸ¥³"></script>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    	<ClientRouter />
		<link rel="alternate" type="application/rss+xml" 
  			title="RSS Feed for My Website" 
  			href="rss.xml" />
	</head>
	<body>
		<Header />
		<main>
			<h1 class="caution">Hi, I'm Mark</h1>
			<h2 class="title" id="animheader">I'm a Software Developer</h2>
			<p>This is my little space on the web to talk about software and other random things.</p>
			
			<div class="profile-image">
				<Image src={me_alien_pic} alt="Mark Outcalt, Software Developer" width="300" height="300" priority />
			</div>

			<!-- Contact Section -->
			<section class="contact">
				<h3>Let's Connect:</h3>
				<div class="contact-links">
					<a href="https://www.linkedin.com/in/mark-outcalt-b3391529/" target="_blank" class="contact-link">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
							<path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
						</svg>
						LinkedIn
					</a>
					<a href="https://docs.google.com/document/d/1-GrFtmUObAP2UkwQAUPnU6cUUIL7FkbGaS7ek33NQYo/edit?tab=t.0" target="_blank" class="contact-link">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
							<polyline points="14,2 14,8 20,8"/>
							<line x1="16" y1="13" x2="8" y2="13"/>
							<line x1="16" y1="17" x2="8" y2="17"/>
							<polyline points="10,9 9,9 8,9"/>
						</svg>
						Resume
					</a>
				</div>
			</section>

			<!-- Kudos Button -->
			<div class="kudos-section">
				<p>Say 'Hi' by clicking kudos counter!</p>
				<button class="tinylytics_kudos loading">
					<div class="loading-spinner"></div>
					<span class="loading-text">Loading kudos...</span>
				</button>
			</div>
		</main>
		<Footer />

		<script is:inline>
			// Wait for TinyLytics to load and populate the button
			function checkKudosLoaded() {
				const kudosButton = document.querySelector('.tinylytics_kudos');
				if (kudosButton && kudosButton.textContent.trim() && !kudosButton.textContent.includes('Loading')) {
					kudosButton.classList.remove('loading');
				} else {
					// Check again in 100ms
					setTimeout(checkKudosLoaded, 100);
				}
			}
			
			// Start checking after a short delay to let TinyLytics initialize
			setTimeout(checkKudosLoaded, 50);

		
		// animated header
		const header = document.getElementById('animheader');
        const text = header.textContent;
        header.innerHTML = '';

        for (let i = 0; i < text.length; i++) {
            const span = document.createElement('span');
            span.className = 'letter';
            
            if (text[i] === ' ') {
                span.classList.add('space');
                span.innerHTML = '&nbsp;';
            } else {
                span.textContent = text[i];
            }
            
            header.appendChild(span);
        }

        const letters = document.querySelectorAll('.letter:not(.space)');
        let transformCount = 8;

        letters.forEach((letter, index) => {
            let currentTransform = 0;
            let isTransformed = false;

            letter.addEventListener('mouseenter', function() {
                if (!isTransformed) {
                    currentTransform = (Math.floor(Math.random() * transformCount) + 1);
                    this.className = 'letter transformed transform-' + currentTransform;
                    isTransformed = true;
                } else {
                    currentTransform = (currentTransform % transformCount) + 1;
                    this.className = 'letter transformed transform-' + currentTransform;
                }
            });

            letter.addEventListener('click', function() {
                this.classList.add('clicked');
                
                let colorInterval = setInterval(() => {
                    const colors = ['#ff7a7a', '#4dd4d4', '#ffdd4d', '#9aefb8', '#ff99aa', '#c4ccf0', '#ffd63d', '#77d488'];
                    const randomColor = colors[Math.floor(Math.random() * colors.length)];
                    this.style.color = randomColor;
                    this.style.textShadow = `0 0 20px ${randomColor}80`;
                }, 120);

                setTimeout(() => {
                    clearInterval(colorInterval);
                    this.classList.remove('clicked');
                }, 1000);
            });
        });

        // Reset all on triple click
        header.addEventListener('click', function(e) {
            if (e.detail === 3) {
                letters.forEach(letter => {
                    letter.className = 'letter';
                    letter.style.color = '';
                    letter.style.textShadow = '';
                });
            }
        });
		</script>
	</body>
</html>

<style>
.caution {
	color: var(--color-theme-1);
}
.title {
	color: var(--color-theme-2);
}
main {
	text-align: center;
}

/* Circular Profile Image Styles */
.profile-image {
	width: 300px;
	height: 300px;
	margin: 2rem auto;
	border-radius: 50%;
	overflow: hidden;
	border: 4px solid var(--color-theme-1);
	box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
	transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.profile-image:hover {
	transform: scale(1.05);
	box-shadow: 0 12px 32px rgba(0, 0, 0, 0.2);
}

.profile-image img {
	width: 100%;
	height: 100%;
	object-fit: cover;
	object-position: center;
}

/* Contact Section Styles */
.contact {
	margin: 3rem auto 2rem;
	max-width: 400px;
}

.contact h3 {
	margin-bottom: 1.5rem;
	color: var(--text-color);
	font-size: 1.5rem;
}

.contact-links {
	display: flex;
	gap: 2rem;
	justify-content: center;
	flex-wrap: wrap;
}

.contact-link {
	display: flex;
	align-items: center;
	gap: 0.5rem;
	padding: 0.75rem 1.5rem;
	background-color: var(--bg-color);
	border: 2px solid var(--color-theme-1);
	border-radius: 8px;
	color: var(--text-color);
	text-decoration: none;
	font-family: 'Jost', sans-serif;
	font-weight: 600;
	transition: all 0.3s ease;
	min-width: 120px;
	justify-content: center;
}

.contact-link:hover {
	background-color: var(--color-theme-1);
	color: var(--bg-color);
	transform: translateY(-2px);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.contact-link svg {
	transition: transform 0.3s ease;
}

.contact-link:hover svg {
	transform: scale(1.1);
}

/* Kudos Section Styles */
.kudos-section {
	margin: 3rem auto 2rem;
	max-width: 400px;
}

.kudos-section p {
	margin-bottom: 1rem;
	color: var(--text-color);
	font-size: 1.1rem;
}

.tinylytics_kudos {
	padding: 0.75rem 1.5rem;
	background-color: var(--bg-color);
	border: 2px solid var(--color-theme-2);
	border-radius: 8px;
	color: var(--text-color);
	font-family: 'Jost', sans-serif;
	font-weight: 600;
	font-size: 1.1rem;
	cursor: pointer;
	transition: all 0.3s ease;
	min-width: 120px;
	position: relative;
	display: inline-flex;
	align-items: center;
	justify-content: center;
	gap: 0.5rem;
}

/* Loading state - shown by default */
.tinylytics_kudos.loading {
	opacity: 0.8;
	cursor: default;
}

.loading-spinner {
	width: 16px;
	height: 16px;
	border: 2px solid transparent;
	border-top: 2px solid currentColor;
	border-radius: 50%;
	animation: spin 1s linear infinite;
}

.loading-text {
	display: inline-block;
}

/* Hide loading content when TinyLytics has loaded */
.tinylytics_kudos:not(.loading) .loading-spinner,
.tinylytics_kudos:not(.loading) .loading-text {
	display: none;
}

/* Spin animation for loading spinner */
@keyframes spin {
	0% { transform: rotate(0deg); }
	100% { transform: rotate(360deg); }
}

/* Normal button states - only apply when not loading */
.tinylytics_kudos:not(.loading):hover {
	background-color: var(--color-theme-2);
	color: var(--bg-color);
	transform: translateY(-2px);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.tinylytics_kudos.did_select {
	background-color: var(--color-theme-1);
	color: var(--bg-color);
	border-color: var(--color-theme-1);
}

.tinylytics_kudos:disabled {
	opacity: 0.6;
	cursor: not-allowed;
}

/* Responsive design */
@media (max-width: 720px) {
	.contact-links {
		flex-direction: column;
		align-items: center;
		gap: 1rem;
	}
	
	.contact-link {
		min-width: 200px;
	}
	
	.profile-image {
		width: 250px;
		height: 250px;
		margin: 1.5rem auto;
	}
	
	.tinylytics_kudos {
		min-width: 200px;
	}
}

/* Header animation styles */
.caution {
	position: relative;
	display: inline-block;
	color: var(--color-theme-1);
	font-size: 5.5rem;
	margin: 0 0 0.5em;
	padding: 0;
	line-height: 1;
	letter-spacing: -2px;
	word-spacing: -4px;
	overflow: hidden;
}

.caution::before {
	content: "";
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: linear-gradient(
		120deg,
		darkred,
		var(--color-theme-2),
		#00ff00,
		#0080ff
	);
	transform: skewX(-30deg) translateX(-120%);
	z-index: -1;
	transition: transform 0.8s ease;
}

.caution:hover::before {
	transform: skewX(-30deg) translateX(120%);
}

@media (max-width: 720px) {
	.caution {
		font-size: 3.5rem;
	}
}


</style>