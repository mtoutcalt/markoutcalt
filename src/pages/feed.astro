---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { ClientRouter } from 'astro:transitions';
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Mastodon Feed | ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
    <ClientRouter />
  </head>
  <body>
    <Header />
    <main>
      <h1>My Mastodon Feed</h1>
      <p>Follow me on Mastodon at <a href="https://mastodon.social/@markoutcalt" target="_blank">@markoutcalt@mastodon.social</a></p>
      
      <div id="mastodon-feed" class="mastodon-feed">
        <div class="loading">
          <div class="spinner"></div>
          <p>Loading toots...</p>
        </div>
      </div>
    </main>
    <Footer />
    
    <script>
      const ACCOUNT_ID = '112657399279878718';
      const MASTODON_INSTANCE = 'mastodon.social';
      const MASTODON_USERNAME = 'markoutcalt';
       
      function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-us', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      }
        
      async function fetchMastodonPosts() {
        const response = await fetch(`https://${MASTODON_INSTANCE}/api/v1/accounts/${ACCOUNT_ID}/statuses?limit=30`);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        return response.json();
      }

      function createTootHeader(post) {
        return `
          <div class="toot-header">
            <img src="${post.account.avatar}" alt="${post.account.display_name}'s avatar" width="48" height="48" class="avatar">
            <div class="toot-meta">
              <span class="username">@${post.account.username}</span>
            </div>
            <div class="toot-date">
              <a href="${post.url}" target="_blank" rel="noopener noreferrer">${formatDate(post.created_at)}</a>
            </div>
          </div>
        `;
      }

      function createMediaSection(attachments) {
        if (!attachments?.length) return '';
        
        const mediaItems = attachments.map(media => {
          if (media.type === 'image') {
            return `
              <a href="${media.url}" target="_blank" rel="noopener noreferrer">
                <img src="${media.preview_url}" alt="${media.description || 'Media attachment'}" class="media-attachment" loading="lazy">
              </a>
            `;
          }
          return `
            <div class="media-not-displayed">
              <a href="${media.url}" target="_blank" rel="noopener noreferrer">${media.type} attachment (click to view)</a>
            </div>
          `;
        }).join('');

        return `<div class="toot-media">${mediaItems}</div>`;
      }
        
      function renderToot(post) {
        return `
          <div class="toot">
            ${createTootHeader(post)}
            <div class="toot-content">${post.content}</div>
            ${createMediaSection(post.media_attachments)}
          </div>
        `;
      }

      function showError(message) {
        return `
          <div class="error-message">
            <div class="error-icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
            </div>
            <p>${message}</p>
            <button class="retry-button" onclick="initializeFeed()">Try Again</button>
          </div>
        `;
      }

      function showEmbedFallback() {
        return `
          <div class="mastodon-embed-container">
            <iframe src="https://${MASTODON_INSTANCE}/@${MASTODON_USERNAME}/embed" 
                    class="mastodon-embed" 
                    width="800" 
                    height="600" 
                    allowfullscreen>
            </iframe>
          </div>
        `;
      }
        
      async function initializeFeed() {
        const feedContainer = document.getElementById('mastodon-feed');
        if (!feedContainer) return;
        
        feedContainer.innerHTML = `
          <div class="loading">
            <div class="spinner"></div>
            <p>Loading toots...</p>
          </div>
        `;
            
        try {
          const posts = await fetchMastodonPosts();
                
          if (!posts?.length) {
            feedContainer.innerHTML = '<div class="empty-feed"><p>No posts found. Check back later for updates!</p></div>';
            return;
          }
                
          const tootsHTML = posts.map((post, index, array) => {
            const tootHTML = renderToot(post);
            const separatorHTML = index < array.length - 1 ? 
              '<hr class="post-separator" style="border: none !important; height: 2px !important; background: var(--color-theme-1) !important; margin: 2rem 0 !important; display: block !important; width: 100% !important; opacity: 0.6 !important;">' : '';
            return tootHTML + separatorHTML;
          }).join('');

          feedContainer.innerHTML = tootsHTML;
        } catch (error) {
          console.error('Error loading feed:', error);
          feedContainer.innerHTML = showError('Unable to load Mastodon feed via API. Falling back to embedded timeline.');
          
          setTimeout(() => {
            feedContainer.innerHTML += showEmbedFallback();
          }, 1500);
        }
      }

      // Initialize on both page load and Astro transitions
      document.addEventListener('DOMContentLoaded', initializeFeed);
      document.addEventListener('astro:page-load', initializeFeed);
    </script>
  </body>
</html>

<style>
  main {
    width: 800px;
    max-width: calc(100% - 2em);
  }

  h1 {
    margin-bottom: 0.5em;
    color: var(--color-theme-1);
  }

  .mastodon-feed {
    display: flex;
    flex-direction: column;
    gap: 0;
    margin-top: 2rem;
  }

  .post-separator {
    border: none !important;
    height: 2px !important;
    background: var(--color-theme-1) !important;
    margin: 2rem 0 !important;
    display: block !important;
    width: 100% !important;
    opacity: 0.6 !important;
  }

  .loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    text-align: center;
    background: var(--bg-color);
    border-radius: 8px;
  }

  .spinner {
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    border-top: 4px solid var(--color-theme-2);
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .error-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    text-align: center;
    background: #1a1a1a;
    border-radius: 8px;
    color: #ff6b6b;
    margin-bottom: 2rem;
  }

  .error-icon {
    margin-bottom: 1rem;
  }

  .retry-button {
    background: var(--color-theme-2);
    color: #000;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-family: 'Jost', sans-serif;
    font-weight: bold;
    margin-top: 1rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .retry-button:hover {
    background: var(--color-theme-1);
  }

  .empty-feed {
    padding: 2rem;
    text-align: center;
    background: #1a1a1a;
    border-radius: 8px;
  }

  .mastodon-embed-container {
    width: 100%;
    margin: 0 auto;
  }

  .mastodon-embed {
    border-radius: 8px;
    background: #1a1a1a;
    width: 100%;
    height: 800px;
    border: 0;
  }

  .toot {
    background: #1a1a1a;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s ease;
  }

  .toot:hover {
    transform: translateY(-3px);
  }

  .toot-header {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }

  .avatar {
    border-radius: 50%;
    margin-right: 0.8rem;
  }

  .toot-meta {
    flex: 1;
  }

  .username {
    font-size: 0.85rem;
    color: #ccc;
  }

  .toot-date {
    font-size: 0.85rem;
  }

  .toot-date a {
    color: #ccc;
    text-decoration: none;
  }

  .toot-date a:hover {
    color: var(--color-theme-2);
    text-decoration: underline;
  }

  .toot-content {
    margin-bottom: 1rem;
    overflow-wrap: break-word;
    word-wrap: break-word;
    line-height: 1.5;
  }

  .toot-content a {
    color: var(--color-theme-2);
  }

  .toot-content a:hover {
    text-decoration: underline;
  }

  .toot-content p {
    margin-bottom: 0.7rem;
  }

  .toot-media {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .media-attachment {
    width: 100%;
    border-radius: 6px;
    transition: opacity 0.2s ease;
  }

  .media-attachment:hover {
    opacity: 0.9;
  }

  .media-not-displayed {
    padding: 1rem;
    background: #2a2a2a;
    border-radius: 6px;
    text-align: center;
  }

  @media (max-width: 720px) {
    .toot {
      padding: 1rem;
    }

    .toot-media {
      grid-template-columns: 1fr;
    }

    .post-separator {
      margin: 1rem 0 !important;
    }
  }
</style>