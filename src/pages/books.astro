---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { ClientRouter } from 'astro:transitions';

// Book Data (same as your last good version)
const books = [
  {
    shortTitle: "Pragmatic Programmer", 
    shortAuthor: "Hunt/Thomas",      
    fullTitle: "The Pragmatic Programmer: Your Journey to Mastery", 
    fullAuthor: "Andrew Hunt & David Thomas", 
    image: "https://source.unsplash.com/random/300x450?abstract+programming+bookcover&sig=1",
    summary: "A classic guide to software craftsmanship, offering pragmatic advice for developers.",
    year: "2019 (2nd Edition)",
    tags: ["Software Development", "Best Practices", "Craftsmanship"],
    link: "https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/",
    spineColor: "#3D5A80", 
    spineTextColor: "#E0FBFC", 
    rating: 5,
    isFavorite: true,
    bookHeight: 220, 
    bookThickness: 38,
  },
  {
    shortTitle: "Clean Code",
    shortAuthor: "Martin",
    fullTitle: "Clean Code: A Handbook of Agile Software Craftsmanship",
    fullAuthor: "Robert C. Martin",
    image: "https://source.unsplash.com/random/300x460?minimalist+white+bookcover&sig=2",
    summary: "Essential principles, patterns, and practices for writing clean, maintainable code.",
    year: "2008",
    tags: ["Software Development", "Code Quality", "Agile"],
    link: "https://www.oreilly.com/library/view/clean-code-a/9780136083238/",
    spineColor: "#987284", 
    spineTextColor: "#F8F4F4", 
    rating: 5,
    bookHeight: 230,
    bookThickness: 42,
  },
  {
    shortTitle: "YDKJS Yet", 
    shortAuthor: "Simpson",
    fullTitle: "You Don't Know JS Yet: Get Started",
    fullAuthor: "Kyle Simpson",
    image: "https://source.unsplash.com/random/300x440?yellow+tech+bookcover&sig=3",
    summary: "A foundational book in the 'You Don't Know JS Yet' series, diving into JavaScript's core.",
    year: "2020 (2nd Edition)",
    tags: ["JavaScript", "Programming", "Core JS"],
    link: "https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/get-started",
    spineColor: "#EE964B", 
    spineTextColor: "#2A2D34", 
    rating: 4,
    bookHeight: 200,
    bookThickness: 30,
  },
  {
    shortTitle: "Data-Intensive Apps",
    shortAuthor: "Kleppmann",
    fullTitle: "Designing Data-Intensive Applications",
    fullAuthor: "Martin Kleppmann",
    image: "https://source.unsplash.com/random/300x470?data+systems+bookcover&sig=4",
    summary: "The big ideas behind reliable, scalable, and maintainable data systems.",
    year: "2017",
    tags: ["Distributed Systems", "Data Architecture", "Scalability"],
    link: "https://dataintensive.net/",
    spineColor: "#4281A4", 
    spineTextColor: "#FEF9EF",
    rating: 5,
    bookHeight: 240,
    bookThickness: 48,
  },
  {
    shortTitle: "Effective Java",
    shortAuthor: "Bloch",
    fullTitle: "Effective Java",
    fullAuthor: "Joshua Bloch",
    image: "https://source.unsplash.com/random/300x455?java+programming+bookcover&sig=5",
    summary: "The definitive guide to Java platform best practices, updated for modern Java.",
    year: "2018 (3rd Edition)",
    tags: ["Java", "Best Practices", "Software Design"],
    link: "https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/",
    spineColor: "#2A9D8F", 
    spineTextColor: "#E9C46A", 
    rating: 4,
    bookHeight: 210,
    bookThickness: 35,
  },
];

const bookTags = [...new Set(books.flatMap(book => book.tags))].sort();
const pageTitle = "The Reader's Retreat";
const pageDescription = "A curated collection of influential books, thoughtfully presented.";
---

<html lang="en">
<head>
  <BaseHead title={pageTitle} description={pageDescription} />
  <ClientRouter />
  <style>
    :root {
      --font-primary: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; /* Softer, modern sans-serif */
      --font-headings: 'Playfair Display', 'Georgia', serif; /* Elegant serif for titles */
      
      /* Updated Color Palette for overall page */
      --color-page-bg: #f4f1ea; /* Warm off-white, paper-like */
      --color-text-main: #3a3a3a; /* Dark grey for main text */
      --color-text-secondary: #707070; /* Lighter grey for subtitles */
      --color-accent-primary: #c08261; /* Muted terracotta/rust */
      --color-accent-secondary: #8c705d; /* Muted brown */
      --color-surface-dark: #3d352e; /* For elements that need to be dark, e.g., filter bar background */

      /* Enhanced realistic wood colors and properties */
      --shelf-wood-base: #8B4513; /* Saddle brown base */
      --shelf-wood-grain-light: #CD853F; /* Peru wood highlight */
      --shelf-wood-grain-dark: #654321; /* Dark brown grain */
      --shelf-wood-highlight: #DEB887; /* Burlywood highlight */
      --shelf-wood-shadow: #3C2415; /* Very dark brown shadow */
      --shelf-wood-medium: #A0522D; /* Sienna mid-tone */
      --shelf-front-edge-height: 18px;
      --shelf-top-surface-height: 6px;
    }

    @import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700&family=Playfair+Display:wght@700;900&display=swap');

    body {
      font-family: var(--font-primary);
      background-color: var(--color-page-bg);
      background-image: url('https://www.transparenttextures.com/patterns/low-contrast-linen.png');
      background-repeat: repeat;
      background-size: auto;
      color: var(--color-text-main);
      margin: 0;
      padding: 0;
      line-height: 1.7; /* Slightly more spacious line height */
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    body::after {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none; /* Crucial: allows interaction with elements below */
      background: radial-gradient(ellipse at center, 
                                  rgba(0,0,0,0) 0%, /* Center transparent */
                                  rgba(0,0,0,0) 55%, /* Broader transparent center */
                                  rgba(0,0,0,0.08) 85%, /* Start of subtle darkening */
                                  rgba(0,0,0,0.12) 100%); /* Max darkening at very edges */
      z-index: -1; 
    }

    .container { max-width: 1280px; margin: 0 auto; padding: 0 2rem; }

    .page-header {
      text-align: center;
      margin: 4rem 0 3rem; /* More space */
      padding-bottom: 2rem;
      /* border-bottom: 1px solid #ddd; Optional subtle separator */
    }
    .page-title {
      font-family: var(--font-headings);
      color: var(--color-accent-primary);
      font-size: 3.5rem; /* Larger */
      font-weight: 700;
      margin: 0 0 0.75rem;
      letter-spacing: -0.5px;
    }
    .page-subtitle {
      font-family: var(--font-primary);
      color: var(--color-text-secondary);
      font-size: 1.3rem;
      font-weight: 300;
      max-width: 700px; /* Constrain width for readability */
      margin-left: auto;
      margin-right: auto;
    }

    .filter-bar {
      display: flex; justify-content: center; flex-wrap: wrap;
      gap: 0.8rem; margin-bottom: 3.5rem; padding: 1rem;
      background-color: var(--color-surface-dark); /* Darker background */
      border-radius: 12px; /* Softer radius */
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .filter-button {
      background-color: rgba(255,255,255,0.1); /* Semi-transparent light on dark */
      border: 1px solid rgba(255,255,255,0.2);
      color: #e0e0e0; /* Light text for dark bg */
      padding: 0.7rem 1.5rem;
      border-radius: 25px; cursor: pointer;
      transition: background-color 0.2s ease, transform 0.1s ease, border-color 0.2s ease;
      font-size: 0.9rem; font-weight: 600; /* Bolder */
    }
    .filter-button:hover {
      background-color: rgba(255,255,255,0.2);
      border-color: rgba(255,255,255,0.3);
      transform: translateY(-2px);
    }
    .filter-button.active {
      background-color: var(--color-accent-primary);
      border-color: var(--color-accent-primary);
      color: white;
      font-weight: 700;
    }

    /* Enhanced Bookshelf Area & Realistic Wood Shelf */
    .bookshelf-area { 
      margin: 3rem auto 5rem; 
      padding: 2rem 0; 
      position: relative;
      
      /* Add subtle floor shadow beneath shelf */
      filter: drop-shadow(0 25px 40px rgba(0,0,0,0.15));
    }
    .bookshelf {
      display: flex; justify-content: center; align-items: flex-end; flex-wrap: wrap;
      gap: 5px 7px; 
      padding: var(--shelf-top-surface-height) 25px 0; 
      margin-bottom: var(--shelf-front-edge-height); 
      
      /* Realistic wood grain background */
      background: linear-gradient(90deg, 
        var(--shelf-wood-grain-dark) 0%, 
        var(--shelf-wood-base) 15%, 
        var(--shelf-wood-grain-light) 30%, 
        var(--shelf-wood-base) 45%, 
        var(--shelf-wood-grain-dark) 60%, 
        var(--shelf-wood-medium) 75%, 
        var(--shelf-wood-grain-light) 90%, 
        var(--shelf-wood-base) 100%
      );
      
      border-top: var(--shelf-top-surface-height) solid var(--shelf-wood-highlight);
      border-radius: 4px 4px 0 0; 
      min-height: calc(280px + var(--shelf-top-surface-height)); 
      position: relative;
      
      /* Enhanced shadows and depth */
      box-shadow: 
        0 3px 10px rgba(0,0,0,0.3), 
        inset 0 2px 4px rgba(0,0,0,0.15),
        inset 0 -2px 4px rgba(255,255,255,0.1);
    }
    /* Add realistic wood grain texture overlay */
    .bookshelf::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: 
        repeating-linear-gradient(
          90deg,
          transparent 0px,
          rgba(0,0,0,0.03) 1px,
          transparent 2px,
          rgba(0,0,0,0.02) 4px,
          transparent 6px,
          rgba(0,0,0,0.04) 8px,
          transparent 12px
        ),
        repeating-linear-gradient(
          0deg,
          transparent 0px,
          rgba(139,69,19,0.1) 2px,
          transparent 4px,
          rgba(160,82,45,0.08) 8px,
          transparent 16px
        );
      mix-blend-mode: multiply;
      pointer-events: none;
    }
    
    /* Add subtle wood aging and wear marks */
    .bookshelf-area::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 20%;
      width: 60%;
      height: 3px;
      background: linear-gradient(90deg,
        transparent 0%,
        rgba(0,0,0,0.1) 20%,
        rgba(0,0,0,0.05) 50%,
        rgba(0,0,0,0.1) 80%,
        transparent 100%
      );
      border-radius: 50%;
      transform: translateY(-50%);
      pointer-events: none;
    }
    .bookshelf::after {
      content: ''; 
      position: absolute; 
      bottom: calc(-1 * var(--shelf-front-edge-height)); 
      left: 0; 
      right: 0; 
      height: var(--shelf-front-edge-height);
      
      /* Enhanced wood edge with gradient and grain */
      background: linear-gradient(180deg,
        var(--shelf-wood-highlight) 0%,
        var(--shelf-wood-medium) 20%,
        var(--shelf-wood-base) 60%,
        var(--shelf-wood-shadow) 100%
      );
      
      border-radius: 0 0 10px 10px; 
      box-shadow: 
        0 15px 30px rgba(0,0,0,0.4),
        0 5px 15px rgba(0,0,0,0.2),
        inset 0 2px 4px rgba(255,255,255,0.1);
    }

    /* Book Spines (largely same as before) */
    .book-spine-container {
      position: relative; cursor: pointer;
      transition: transform 0.2s cubic-bezier(0.22, 1, 0.36, 1), filter 0.2s ease-out;
      border-radius: 2px 2px 1px 1px; display: flex;
      filter: drop-shadow(2px 2px 2px rgba(0,0,0,0.25));
    }
    .book-spine-container:hover {
      transform: var(--original-transform, rotate(0deg) translateY(0px)) translateY(-12px) scale(1.04);
      filter: drop-shadow(4px 8px 8px rgba(0,0,0,0.35));
      z-index: 10;
    }
    .book-spine-container.favorite-book::before { /* same */ }
    .book-spine-svg { /* same */ }
    .book-spine-svg .spine-rect { stroke: rgba(0,0,0,0.3); stroke-width: 0.75; }
    .book-spine-svg .spine-page-edge { fill: #e0d8c0; }
    .book-spine-svg .spine-text { font-family: var(--font-serif); dominant-baseline: middle; pointer-events: none; }
    .book-spine-svg .spine-title-text { font-weight: 700; }
    .book-spine-svg .spine-author-text { font-weight: 400; opacity: 0.9; }
    .spine-highlight-gradient stop:nth-child(1) { stop-color: rgba(255,255,255,0.18); }
    .spine-highlight-gradient stop:nth-child(2) { stop-color: rgba(255,255,255,0.05); }
    .spine-highlight-gradient stop:nth-child(3) { stop-color: rgba(0,0,0,0.05); }
    .spine-highlight-gradient stop:nth-child(4) { stop-color: rgba(0,0,0,0.18); }


    /* --- MODAL POSITIONING AND STYLING FIXES --- */
    .modal-overlay {
      position: fixed; /* Fixed to viewport */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(40, 40, 45, 0.85); /* Darker, less transparent */
      backdrop-filter: blur(6px); /* Stronger blur */
      display: flex; /* For centering the modal */
      align-items: center;
      justify-content: center;
      z-index: 1000; /* High z-index */
      opacity: 0;
      visibility: hidden; /* Use visibility for better accessibility and transition control */
      transition: opacity 0.3s ease, visibility 0s linear 0.3s; /* Delay visibility change */
    }
    .modal-overlay.visible {
      opacity: 1;
      visibility: visible;
      transition: opacity 0.3s ease, visibility 0s linear 0s;
    }

    .book-modal {
      background-color: var(--color-page-bg); /* Use page background for modal for consistency */
      color: var(--color-text-main); /* Use main text color */
      border-radius: 12px;
      box-shadow: 0 10px 40px rgba(0,0,0,0.3);
      width: 90%;
      max-width: 780px; /* Slightly wider */
      max-height: 90vh;
      display: flex;
      flex-direction: column;
      overflow: hidden; /* Important for border-radius and internal scroll */
      transform: scale(0.95) translateY(10px); /* Initial state for animation */
      opacity: 0; /* Initial state for animation */
      transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275), opacity 0.25s ease-out;
      /* No position: relative needed here as it's centered by flex in overlay */
    }
    .modal-overlay.visible .book-modal {
      transform: scale(1) translateY(0);
      opacity: 1;
    }

    .modal-content-wrapper {
      display: flex;
      padding: 2rem;
      overflow-y: auto; /* Scroll content within this wrapper */
      gap: 2rem;
    }
    .modal-cover { flex-shrink: 0; width: 220px; /* Adjust if needed */ }
    .modal-cover img { width: 100%; height: auto; border-radius: 6px; box-shadow: 0 6px 15px rgba(0,0,0,0.15); }
    .modal-details { flex-grow: 1; min-width: 0; }

    .modal-title {
      font-family: var(--font-headings);
      font-size: 2.1rem; /* Slightly smaller if modal is narrower */
      color: var(--color-accent-primary);
      margin: 0 0 0.5rem;
      line-height: 1.2;
    }
    .modal-author {
      font-family: var(--font-primary);
      font-size: 1.1rem;
      font-style: italic; /* Italic can be nice for author */
      color: var(--color-text-secondary);
      margin-bottom: 1.25rem;
    }
    .modal-rating { color: #e7a74e; margin-bottom: 1rem; font-size: 1.2rem; } /* Warmer gold */
    .modal-year { font-size: 0.9rem; color: var(--color-text-secondary); margin-bottom: 1.25rem; }
    .modal-summary { margin-bottom: 1.5rem; line-height: 1.7; font-size: 0.95rem; }
    .modal-tags { display: flex; flex-wrap: wrap; gap: 0.6rem; margin-bottom: 1.5rem; }
    .modal-tag {
      background-color: #e0e0e0; /* Lighter tags */
      color: var(--color-text-secondary);
      padding: 0.35rem 0.8rem;
      border-radius: 15px;
      font-size: 0.8rem;
      font-weight: 600;
    }
    .modal-actions {
      padding: 1.25rem 2rem;
      border-top: 1px solid #ddd; /* Lighter border */
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
      background-color: rgba(0,0,0,0.02); /* Very subtle footer bar */
    }
    .modal-button {
      padding: 0.75rem 1.5rem; /* Slightly larger buttons */
      border-radius: 8px;
      border: none;
      cursor: pointer;
      font-weight: 700; /* Bolder */
      transition: all 0.2s ease;
      font-size: 0.9rem;
      letter-spacing: 0.5px;
    }
    .modal-button:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
    .modal-link-button {
      background-color: var(--color-accent-primary);
      color: white;
      text-decoration: none;
    }
    .modal-link-button:hover { background-color: var(--color-accent-secondary); }
    .modal-close-button {
      background-color: #e0e0e0; /* Light grey close button */
      color: var(--color-text-secondary);
    }
    .modal-close-button:hover { background-color: #d0d0d0; }

    .empty-state { text-align:center; padding:3rem 1rem; color:var(--color-text-secondary); font-size:1.2rem; display:none; }
    @media (max-width:700px) {
      .modal-content-wrapper{flex-direction:column;align-items:center;text-align:center;}
      .modal-cover{width:50%;max-width:180px;margin-bottom:1.5rem;}
      .modal-title{font-size:1.7rem;}
      .modal-author{font-size:1rem;}
      .modal-actions{justify-content:center;}
      .bookshelf{justify-content:flex-start;}
      .page-title { font-size: 2.8rem; }
      .page-subtitle { font-size: 1.1rem; }
    }

  </style>
</head>
<body>
  <Header /> {/* Assuming Header and Footer components are styled independently or will adapt */}
  <main class="container">
    <div class="page-header">
      <h1 class="page-title">{pageTitle}</h1>
      <p class="page-subtitle">{pageDescription}</p>
    </div>
    
    <div class="filter-bar">
      <button class="filter-button active" data-filter="all">All Categories</button>
      {bookTags.map((tag) => (
        <button class="filter-button" data-filter={tag}>{tag}</button>
      ))}
    </div>
    
    <div class="bookshelf-area">
      <div class="bookshelf" id="bookshelf">
        {books.map((book, index) => {
          // SVG generation logic (same as your last good version)
          const thickness = book.bookThickness;
          const height = book.bookHeight;
          const titleFontSize = Math.max(9, Math.min(15, thickness * 0.33));
          const authorFontSize = Math.max(8, Math.min(12, thickness * 0.23));
          const textGroupY = thickness * 0.5; 
          const titleRelY = -thickness * 0.15; 
          const authorRelY = thickness * 0.18;
          const initialRotation = (Math.random() * 2 - 1).toFixed(2); 
          const initialYOffset = (Math.random() * 2 -1).toFixed(2); 
          const initialXOffset = (Math.random() * 2 -1).toFixed(2); 
          const originalTransform = `translateX(${initialXOffset}px) translateY(${initialYOffset}px) rotate(${initialRotation}deg)`;

          return (
          <div
            class:list={["book-spine-container", { "favorite-book": book.isFavorite }]}
            data-book-index={index}
            data-tags={JSON.stringify(book.tags)}
            style={`
              width: ${thickness}px;
              height: ${height}px;
              --original-transform: ${originalTransform};
              transform: ${originalTransform};
              --book-spine-thickness: ${thickness}px; 
            `}
            title={`View details for "${book.fullTitle}"`}
            role="button" tabindex="0" aria-haspopup="dialog"
          >
            <svg 
              class="book-spine-svg" viewBox={`0 0 ${thickness} ${height}`} 
              preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"
            >
              <defs>
                <linearGradient id={`spineGrad-${index}`} x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%" style="stop-color:rgba(255,255,255,0.18);" />
                  <stop offset="30%" style="stop-color:rgba(255,255,255,0.05);" />
                  <stop offset="70%" style="stop-color:rgba(0,0,0,0.05);" />
                  <stop offset="100%" style="stop-color:rgba(0,0,0,0.18);" />
                </linearGradient>
                <filter id={`grainFilter-${index}`}>
                  <feTurbulence type="fractalNoise" baseFrequency="0.5" numOctaves="1" result="turbulence" stitchTiles="stitch" />
                  <feColorMatrix in="turbulence" type="matrix" values="0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 0.07 0" result="noisePattern"/>
                  <feMerge>
                    <feMergeNode in="SourceGraphic"/>
                    <feMergeNode in="noisePattern"/>
                  </feMerge>
                </filter>
              </defs>
              <rect class="spine-rect" width="100%" height="100%" fill={book.spineColor} filter={`url(#grainFilter-${index})`} />
              <rect class="spine-page-edge" x="0" y="0" width={thickness} height="2.5" />
              <g transform={`translate(${thickness / 2}, ${height / 2}) rotate(-90) translate(-${height / 2}, -${thickness / 2})`}>
                <text class="spine-text spine-title-text" x={height / 2} y={textGroupY + titleRelY} font-size={`${titleFontSize}px`} fill={book.spineTextColor} text-anchor="middle">{book.shortTitle}</text>
                <text class="spine-text spine-author-text" x={height / 2} y={textGroupY + authorRelY} font-size={`${authorFontSize}px`} fill={book.spineTextColor} text-anchor="middle">{book.shortAuthor}</text>
              </g>
              <rect width="100%" height="100%" fill={`url(#spineGrad-${index})`} /> 
            </svg>
          </div>
          );
        })}
      </div>
      <div class="empty-state" id="emptyState">
         <p>No books found for this category.</p>
      </div>
    </div>
  </main>

  <div class="modal-overlay" id="bookModalOverlay">
    <div class="book-modal" id="bookModal" role="dialog" aria-modal="true" aria-labelledby="modalTitleElem">
        <div class="modal-content-wrapper">
            <div class="modal-cover"><img id="modalCoverImage" src="" alt="Book Cover" /></div>
            <div class="modal-details">
                <h2 id="modalTitleElem" class="modal-title"> </h2>
                <p id="modalAuthorElem" class="modal-author"> </p>
                <div id="modalRating" class="modal-rating"> </div>
                <p id="modalYear" class="modal-year"> </p>
                <div id="modalTags" class="modal-tags"> </div>
                <p id="modalSummary" class="modal-summary"> </p>
            </div>
        </div>
        <div class="modal-actions">
            <a id="modalLearnMoreLink" href="#" target="_blank" rel="noopener noreferrer" class="modal-button modal-link-button">Learn More</a>
            <button id="modalCloseButton" class="modal-button modal-close-button" aria-label="Close modal">Close</button>
        </div>
    </div>
  </div>

  <Footer />
  
  <script define:vars={{ booksData: books }}>
    // JS (same as your last good version - ensure IDs match)
    document.addEventListener('DOMContentLoaded', () => {
      const bookshelf = document.getElementById('bookshelf');
      const allBookSpineContainers = Array.from(bookshelf.querySelectorAll('.book-spine-container'));
      const modalOverlay = document.getElementById('bookModalOverlay');
      const modal = document.getElementById('bookModal');
      const modalCloseButton = document.getElementById('modalCloseButton');

      const modalCoverImage = document.getElementById('modalCoverImage');
      const modalTitleElem = document.getElementById('modalTitleElem'); // Matched to HTML
      const modalAuthorElem = document.getElementById('modalAuthorElem'); // Matched to HTML
      const modalRating = document.getElementById('modalRating');
      const modalYear = document.getElementById('modalYear');
      const modalTags = document.getElementById('modalTags');
      const modalSummary = document.getElementById('modalSummary');
      const modalLearnMoreLink = document.getElementById('modalLearnMoreLink');
      
      let lastFocusedElement = null;

      function openModal(bookIndex) {
        const book = booksData[bookIndex];
        if (!book) return;
        lastFocusedElement = document.activeElement;
        modalCoverImage.src = book.image;
        modalCoverImage.alt = `Cover of ${book.fullTitle}`;
        modalTitleElem.textContent = book.fullTitle;
        modalAuthorElem.textContent = `by ${book.fullAuthor}`;
        modalRating.innerHTML = Array.from({length:5}).map((_,i) => `<span>${i<book.rating ? '★':'☆'}</span>`).join('');
        modalYear.textContent = `Published: ${book.year}`;
        modalTags.innerHTML = book.tags.map(tag => `<span class="modal-tag">${tag}</span>`).join('');
        modalSummary.textContent = book.summary;
        modalLearnMoreLink.href = book.link;
        modalOverlay.classList.add('visible');
        document.body.style.overflow = 'hidden';
        modal.setAttribute('aria-hidden', 'false');
        modalCloseButton.focus();
      }

      function closeModal() {
        modalOverlay.classList.remove('visible');
        document.body.style.overflow = '';
        modal.setAttribute('aria-hidden', 'true');
        if (lastFocusedElement) lastFocusedElement.focus();
      }

      allBookSpineContainers.forEach(container => {
        container.addEventListener('click', () => openModal(parseInt(container.dataset.bookIndex)));
        container.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            openModal(parseInt(container.dataset.bookIndex));
          }
        });
      });

      modalCloseButton.addEventListener('click', closeModal);
      modalOverlay.addEventListener('click', e => (e.target === modalOverlay) && closeModal());
      document.addEventListener('keydown', e => (e.key === 'Escape' && modalOverlay.classList.contains('visible')) && closeModal());

      const filterButtons = document.querySelectorAll('.filter-button');
      const emptyState = document.getElementById('emptyState');
      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          filterButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          const filter = button.dataset.filter;
          let visibleCount = 0;
          allBookSpineContainers.forEach(container => {
            const tags = JSON.parse(container.dataset.tags || '[]');
            const matches = (filter === 'all' || tags.includes(filter));
            container.style.display = matches ? 'flex' : 'none';
            if (matches) visibleCount++;
          });
          emptyState.style.display = visibleCount === 0 ? 'block' : 'none';
          bookshelf.style.display = visibleCount === 0 ? 'none' : 'flex';
        });
      });
      document.querySelector('.filter-button[data-filter="all"]').click();
    });
  </script>
</body>
</html>