---
const books = [
  {
    title: "The Pragmatic Programmer",
    author: "Andrew Hunt & David Thomas",
    image: "/public/cover.jpg",
    summary: "A classic book that covers best practices and pragmatic tips for efficient software development."
  },
  {
    title: "Clean Code",
    author: "Robert C. Martin",
    image: "/public/cover.jpg",
    summary: "This book discusses principles and best practices for writing clean, readable, and maintainable code."
  },
  {
    title: "You Donâ€™t Know JS (Yet)",
    author: "Kyle Simpson",
    image: "/public/cover.jpg",
    summary: "An in-depth series on core JavaScript mechanisms, covering scopes, closures, prototypes, and more. An in-depth series on core JavaScript mechanisms, covering scopes, closures, prototypes, and more An in-depth series on core JavaScript mechanisms, covering scopes, closures, prototypes, and more An in-depth series on core JavaScript mechanisms, covering scopes, closures, prototypes, and more An in-depth series on core JavaScript mechanisms, covering scopes, closures, prototypes, and more"
  },
];
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>My Bookshelf</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        background: #151515;
        color: #333;
      }
      h1 {
        text-align: center;
        margin: 2rem 0 1rem;
        font-family: 'Jost';
        color: var(--color-theme-1);
      }
      .bookshelf {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0rem;
      }
      .shelf-row {
        position: relative;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin-bottom: 0rem;
        padding-bottom: 3rem;
    }
    .shelf-row::after {
        content: "";
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 50px;
        /* Wood color + grain pattern */  
        background:
            repeating-radial-gradient(
              circle at 20% 20%,
              rgba(255, 255, 255, 0.03),
              rgba(255, 255, 255, 0.03) 3px,
              transparent 3px,
              transparent 15px
            ),
            linear-gradient(to bottom, #c6a86b 0%, #b38a65 100%);
        background-blend-mode: overlay;
        background-size: cover;
        box-shadow: inset 0 0 5px rgba(0,0,0,0.3),
                    0 3px 3px rgba(0,0,0,0.2);
        z-index: 0;
    }


      /* ---------------------------------------------
         3. Book Container & 3D Setup
      --------------------------------------------- */
      .book {
        position: relative;
        width: 200px;
        height: 300px;
        margin: 0 1rem 0.5rem;
        cursor: pointer;
        z-index: 1;
        transition: z-index 0.3s;
      }

      /* 
        Only this inner element has perspective, so .book itself
        does not create a 3D stacking context that traps the summary.
      */
      .book-inner {
        perspective: 400px; 
        width: 100%;
        height: 100%;
      }

      .book-cover {
        width: 100%;
        height: 100%;
        background-color: #ccc;
        background-size: cover;
        background-position: center;
        border-radius: 4px;
        box-shadow: 0 6px 10px rgba(0,0,0,0.2);
        transition: transform 0.4s ease, box-shadow 0.2s;
        transform-origin: left center; /* for a left-edge flip effect */
      }

      /* 
        On hover, we do a slight 3D rotation 
        AND bring this .book forward in the stacking order 
      */
      .book:hover {
        z-index: 9998; /* on hover, bring the entire book to the top */
      }
      .book:hover .book-cover {
        transform: rotateY(-10deg);
        box-shadow: 0 8px 15px rgba(0,0,0,0.3);
      }


      .book-summary-container {
        position: absolute;
        top: 50%;
        left: 110%; /* a bit to the right of the book */
        transform: translateY(-50%) scale(0.95);
        width: 220px;
        background: #fff;
        padding: 1rem;
        border-radius: 4px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease, transform 0.3s ease;
        /* 
          Very high z-index so the popup is above everything else
          But it's still "scoped" to .book if .book is behind another 
          with an even higher z-index unless we also raise .book when active
        */
        z-index: 9999; 
      }
      /* 
        We'll also raise the .book's z-index when the summary is active, 
        so it stays on top even if the user hovers over a different book.
      */
      .book-summary-container.active {
        opacity: 1;
        pointer-events: auto;
        transform: translateY(-50%) scale(1);
      }

      /* 
        When .book-summary-container is active, 
        ensure the parent .book is also brought on top 
        in case the user hovers over another book. 
      */
      .book-summary-container.active ~ .book-inner,
      .book-summary-container.active {
        z-index: 9999;
      }

      .book-summary-container h3 {
        margin-top: 0;
      }
      .close-summary {
        display: inline-block;
        margin-top: 1rem;
        padding: 0.3rem 0.6rem;
        background: #333;
        color: #fff;
        text-decoration: none;
        font-size: 0.8rem;
        border-radius: 3px;
        cursor: pointer;
      }

      .book-summary-container::before {
        content: "";
        position: absolute;
        left: -10px;
        top: 50%;
        transform: translateY(-50%);
        border: 6px solid transparent;
        border-right-color: #fff;
      }

      @media (max-width: 768px) {
        .book {
          margin: 1rem;
        }
        .book-summary-container {
          left: 105%;
          width: 180px;
        }
      }
    </style>
  </head>
  <body>
    <h1>My Favorite Books</h1>

    <div class="bookshelf">
      <div class="shelf-row">
        {books.map((book, index) => (
          <div class="book" data-index={index}>
            <div class="book-inner">
              <div 
                class="book-cover"
                style={`background-image: url('${book.image}');`}
              ></div>
            </div>

            {/* Summary is a child of .book, positioned absolutely */}
            <div class="book-summary-container">
              <h3>{book.title}</h3>
              <p><strong>Author:</strong> {book.author}</p>
              <p>{book.summary}</p>
              <a class="close-summary">Close</a>
            </div>
          </div>
        ))}
      </div>
    </div>

    <script>
      const bookEls = document.querySelectorAll('.book');
      bookEls.forEach((bookEl) => {
        const summaryEl = bookEl.querySelector('.book-summary-container');
        const closeBtn = summaryEl.querySelector('.close-summary');

        // Toggle summary on click (unless it's the close button)
        bookEl.addEventListener('click', (e) => {
          if (!e.target.classList.contains('close-summary')) {
            // Close any other open summary
            document.querySelectorAll('.book-summary-container.active').forEach((openSummary) => {
              if (openSummary !== summaryEl) {
                openSummary.classList.remove('active');
                // Lower z-index on the parent .book
                openSummary.closest('.book').style.zIndex = 1;
              }
            });

            // Toggle this summary
            const isActive = summaryEl.classList.toggle('active');
            // If active, bump the parent .book's z-index to the top
            bookEl.style.zIndex = isActive ? 9998 : 1;
          }
        });

        // Close the summary when "Close" is clicked
        closeBtn.addEventListener('click', (e) => {
          e.stopPropagation(); // prevent .book click
          summaryEl.classList.remove('active');
          // Reset the parent .book's z-index
          bookEl.style.zIndex = 1;
        });
      });
    </script>
  </body>
</html>
